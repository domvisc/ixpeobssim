.. _irfgen:

Generating IRFs
===============

.. warning::
   This section represents an in-depth technical description of the process of
   generating the instrument response function, in the hope that the content
   will be useful for the creation of the final CALDB products that we shall
   use when IXPE is on orbit. As such, it might not be very interesting, or
   even relevant, for the casual user.

   If you were looking for a more mundane introduction to the subject, you
   might want to read the section about :ref:`irf`, first.

   Also, this section is work in progress, as we work our way closing the circle
   on a fully fledged weighted analysis, so it is subject to change without
   warning.


.. seealso:: :ref:`irf`


Instrument response functions are generated using a mixture of:

* simulated photon lists generated with the full detector simulation based on
  Geant4, a.k.a. ``ixpesim``;
* analytic calculations based on theory and/or available databases (e.g., the
  `XCOM <https://www.nist.gov/pml/xcom-photon-cross-sections-database>`_ photon
  cross section database developed by NIST);
* ancillary files coming from either simulations or measurements (e.g., the
  MMA effective area curves and vignetting function, or the correction table to
  bring the `ixpesim` output in line with the instrument calibration, whenever
  there is a measurable difference between the two).

The overall architecture of the IRF generation is streamlined to make it
easy to generate self-consistent sets of response functions for different
situation and/or detector or telescopes (e.g., at different GPD pressure)
without having to re-run massive and time-consuming simulations each time.


Input ``ixpesim`` data sets
---------------------------

Much of the necessary information specific to the GPD comes from either line-type
or broadband ``ixpesim`` simulations (we shall refer to the latter as ``allx``
simulations in the following).


All-X simulations
~~~~~~~~~~~~~~~~~

``allx`` simulations are generated with a custom spectrum designed to generate
photon lists roughly equi-populated between 1 and 12 keV `after the effect of
the window transparency`. This is achieved with a custom spectrum file
(essentially representing the inverse of the window transparency as a function
of energy) that can be fed into ``ixpesim``. The file is generated by the
``mkallx.py`` facility in a format that is directly inter-operable with ``ixpesim``
and saved in the ``irfgen/data/gpd`` folder. The very same file is then used
to process the simulated photon lists to calculate the number of generated events
as a function of the energy, which is one of the ingredients going into the
effective-area calculations.

.. note::
   The information about the total number of generated events, which is necessary
   for the generation of the effective area tables, was added as a header keyword
   into the output photon lists in ``ixpesim`` version 12.4.1---so you will need
   Monte Carlo data sets simulated with a ``gpdsw`` version newer than that
   to generate response functions.

``allx`` simulations are performed at a fixed pressure (e.g., 700 mbar) and the
re-scaling at different pressures is applied self-consistently at a later stage,
as described in the following.


Line simulations
~~~~~~~~~~~~~~~~

Line simulations are intrinsically different from broadband ones, in that they
allow to achieve a much better statistics at any given energy, although only
over a relatively small set of discrete values.

Initial experience with generating response functions informed by ``ixpesim``
clearly indicated that both types of simulations have definite advantages and
disadvantages, and that a combined use of the two allows for the most faithful
representation of the detector response---therefore we use both for specific
purposes.


Pressure scans
~~~~~~~~~~~~~~

`Pressure scans` (simulated line data sets spanning a reduced energy grid and
for different pressure values) are used to re-scale the relevant quantities
starting from the nominal pressure, and complement the ``allx`` and line
simulations for the purpose of generating response functions.


Pre-processing
--------------

The first step in generating response functions is a pre-processing of the
photon lists produced by ``ixpesim`` to create a series of binned data products
to be used at a later stage. Since the original FITS files containing the
reconstructed events can be quite large, this is mainly aimed at reducing the
necessary information to a size that can be easily stored and tracked for
future reference. (Once pre-processes, the original event lists are never to be
used again in the process.)
Output files from this pre-processing stage are normally stored into the
``IXPEOBSSIM_IRFGEN/data/gpd`` folder.

Since the response for events absorbed in the window, in the active volume of the
gas cell and in the GEM have a fundamentally different response, the process is
split into the three absorption types since the very beginning, and the the
latter are re-assembled together (in the right proportion) only at the very end,
before the actual response functions are written to file.

All files are tagged with a sequential version number for tracking purposes,
and contain all the relevant information about the simulation setup for the
underlying photon lists in the form of suitable header keywords. A concise
summary of the main features of the various iterations of these auxiliary files
is included at the end of this section.


All-X simulations
~~~~~~~~~~~~~~~~~

``allx`` simulations are mainly used to generate the effective area curves,
as well as the response matrix. They also provide the basic necessary information
to produce auxiliary tables for ancillary quantities (e.g., event weights,
window size) that can inform ``ixpeobssim`` simulations.

.. note::

   One subtle point in the pre-processing of ``allx`` simulations is that
   the measured energy in the ``ixpesim`` outputs is stored in the for of
   `un-calibrated` PHA values (the typical conversion factor is
   3000 ADC counts / keV, but mileage may vary depending on the GEM gain).

   In real life the calibration of the the PHA values (i.e., the conversion
   between PHAs and PIs) is performed in the standard SOC processing pipeline,
   based on the ground calibrations of the flight detectors, and applying a
   variety of corrections to take into account all the physical processes
   involved (i.e., charging, secular gain variations, temperature variations,
   gain non-uniformity).

   For the purpose of generating response functions and using simulated data sets
   in spectro-polarimetric fits, we resort to a phenomenological correction
   to take into account the bulk on the non-linearity in the detector
   response---essentially we fit to an error function the scale factor between
   the peak PHA value and the physical energy as a function of the latter, and
   we use this fit to derive a model for the conversion between PHA and PI.
   (The overall non-linearity is of the order of 2% in the nominal 2--8 keV
   energy band, which is enough to affect the spectral fits by a measurable
   extent.) This model is stored in a dedicated FITS file for later use.


Here is a basic code snippet illustrating the usage and the output data
products of the pre-processing stage.

.. code-block::

   $ python ixpeobssim/irfgen/mkauxallx.py path/to/allx/simulations*.fits
   $ ls ixpeobssim/irfgen/data/gpd/aux_allx_*
   ixpeobssim/irfgen/data/gpd/aux_allx_edisp_dme_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_allx_edisp_gem_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_allx_edisp_win_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_allx_pha_model_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_allx_qeff_v003.fits

Generally speaking:

* ``*qeff*.fits`` files contain the quantum efficiency for the three types of
  events as a function of the energy, in the form of a simple binary table;
* ``*edisp*.fits`` files contain two-dimensional histograms in the
  channel--energy space, that are used down to road to produce the response matrix.
* ``*pha_model*.fits`` files contain the (non-linear) model used to convert the
  ``ixpesim`` PHA values into valid pulse invariant values, and need to be
  stored to be used later to add the ``PI`` column to ``ixpesim`` simluations
  in a self-consistent fashion.


Line simulations
~~~~~~~~~~~~~~~~

The pre-processing for line simulations is similar to that for ``allx`` data sets.

.. warning::

   For the sake of consistency, the PHA to PI conversion model used for line
   simulations is the same calculated (and written out to file) at the
   ``allx`` pre-processing stage. It follows that it is important to pre-process
   the ``allx`` files, first, and then the line data sets.

The following snippet illustrates this pre-processing stage for line simulations.

.. code-block::

   $ python ixpeobssim/irfgen/mkauxlines.py path/to/lines/simulations*.fits
   $ ls ixpeobssim/irfgen/data/gpd/aux_lines_*
   ixpeobssim/irfgen/data/gpd/aux_lines_edisp_dme_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_lines_edisp_gem_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_lines_edisp_win_v003.fits
   ixpeobssim/irfgen/data/gpd/aux_lines_qeff_v003.fits

The files have essentially the same meaning as in the ``allx`` case.


Pressure scans
~~~~~~~~~~~~~~

The pressure scans are used to gauge the dependence of the modulation factor on
the pressure into the gas cell. The pre-processing stage produces a single FITS
files with the values of the modulation factor (using DETPHI1 and DETPHI2) as
a function of energy and pressure.

.. code-block::

   $ python ixpeobssim/irfgen/mkauxpscan.py path/to/pressure/scan/simulations*.fits
   $ ls ixpeobssim/irfgen/data/gpd/aux_pscan_*
   ixpeobssim/irfgen/data/gpd/aux_pscan_modf_v003.fits




Post-processing
---------------

This is where all the processing (e.g., averaging and fitting) takes place.
This step turns the pre-baked binned files into fully-processed products that
are then `read` in the final step and assembled into OGIP-compliant response
files.


All-X simulations
~~~~~~~~~~~~~~~~~

For ``allx`` simulation we post-process the energy dispersion files for the
events converting in the passive materials (i.e., the window and the GEM),
applying a smoothing based on a Gaussian kernel-estimation density. (The shape
of the energy dispersion for the passive conversion is too complicated to be
parametrized in terms of a sensible analytic function.)
This produces partial matrices for these two components that can be later
assembled together, along with the events converting in the gas, into the final
response matrix.

.. code-block::

   $ python ixpeobssim/irfgen/mkauxallxpp.py
   $ ls ixpeobssim/irfgen/data/gpd/aux_allx_rmf*
   ixpeobssim/irfgen/data/gpd/aux_allx_rmf_gem_v001.fits
   ixpeobssim/irfgen/data/gpd/aux_allx_rmf_win_v001.fits


Line simulations
~~~~~~~~~~~~~~~~

The component of the response matrix due to the events converting in the active
gas medium (which is the vast majority of them) is well behaved enough that the
corresponding pulse-height spectrum can be fitted to a reasonable analytic
function. This is done using the line simulation (providing larger statistics
at any given energy), and the fit parameters are then interpolated in energy
to provide a representation of the response matrix across the entire phase space.

.. code-block::

   $ python ixpeobssim/irfgen/mkauxlinespp.py
   $ ls ixpeobssim/irfgen/data/gpd/aux_lines_rmf*
   ixpeobssim/irfgen/data/gpd/aux_lines_rmf_dme_v001.fits



Pressure scans
~~~~~~~~~~~~~~

The binned files from the pressure scans do not need to be post-processed, as the
tools downstream interface directly to the pre-processed files.


Response file generation
------------------------

While most of the code writing the actual response functions lives into
the :mod:`ixpeobssim.irfgen.base` Python module, the actual entry point for
generating the response files is the ``mkixpeirf.py`` script in the
``ixpeobssim.irfgen`` folder. When called with no arguments, this will
pick up all the different bits and stich them together for you.

.. warning::

   We never, ever overwrite response files in the ``ixpeobssim`` pseudo-CALDB,
   once released into a tagged version. Bump the version number if you need a
   new set of response functions for general consumption.

``ixpeobssim`` also provides a small facility called ``mkcustomirf.py`` that
will allow you to create custom response functions, at an arbitrary pressure,
mainly aimed at being used in conjunction with ground test and calibration data
with the flight detectors and/or detector units.


Effective area
--------------

The effective area is largely modeled based on either analytic calculations
from tabulated data or calibration data. The ``ixpesim`` ``allx`` simulations
are used to model the effect of photo-electrons absorbed in the passive materials
(the window or the GEM) close enough to the inner surfaces that they can make it
to the active gas volume and trigger the detectors. More specifically:

* the mirror effective area curves come from a mixure of tabulated data and
  MMA ground calibration data, and is provided by MSFC;
* the UV filter transparency is calculated using tabulated cross sections
  (and the result is cross-checked against experimental data);
* the Be window transparency is, likewise, calculated using tabulated cross
  sections; this allows to quickly modify the thickness of the various components,
  if needed, as well as the concentration of the contaminants;
* the quantum efficiency of the gas is, again, calculated using tabulated cross
  sections; this gives us full flexibility in terms of the internal pressure
  of the gas cell, with no need of running time-consuming simulation for
  each pressure of interest; as of ``gpdsw`` version 9.0.0 the scaling of the
  DME density if ``ixpesim`` and ``ixpeobssim`` is parametrized in the same
  exact form, and the two programs give results that agree to much better than
  one part in a thousand;
* the contribution of the passive absorption is modeled based on the
  ``allx`` simulations, as detailed in the next section.


Passive absorption
~~~~~~~~~~~~~~~~~~

``allx`` simulated data sets allow to calculate the quantum efficiency
(i. e., the fractions of events impinging on the detector leaving enough signal
in the active volume to trigger the readout), disaggregated by absorption
type---window, DME and GEM. At the nominal pressure of 800 mbar this is enough
calculate the GPD quantum efficiency as the sum of the three components:

.. math::
   Q_{\text{GPD}}(E, p) = Q_{\text{W}}(E) + Q_{\text{DME}}(E, p) + Q_{\text{GEM}}(E, p)

.. _figure-aux_quantum_efficiency_v001:
.. figure:: figures/irfgen/aux_quantum_efficiency_v001.*
   :width: 80%

   GPD quantum efficiency at 800 mbar, disaggregated by absorption type: window,
   DME and GEM. Note these figures include the transparency of the Beryllium
   window, as modeled in the full detector simulation. The noise in the line
   reflects the finite statistics in the underlying ``ixpesim`` simluation.

As the window transparency and the photoabsorption efficiency of the active gas
volume can be readily calculated using the nominal composition and the
tabulated cross section, the first step in modeling the passive absorption is
to convert the number of events converting into the window or the GEM into
the corresponding `photo-electron extraction probability`---a figure that is
pressure-independent and can be therefore used to scale the values at an
arbitrary gas pressure.

The calculation is trivial for the window: as the latter is traversed by `all`
simulated photons, the photo-electron extraction probability coincides with the
quantum efficiency:

.. math::
   \varepsilon_{\text{W}}(E) = Q_{\text{W}}(E)

(Using the tabulated window transparency and DME photoabsorption efficiency)
the extraction probability for the GEM can be readily calculated by noting that

.. math::
   Q_{\text{GEM}}(E, 800~\text{mbar}) = T_{\text{W}}(E)
   \left( 1 - \varepsilon_{\text{DME}}(E, 800~\text{mbar})\right)
   \varepsilon_{\text{GEM}}(E),

and therefore

.. math::
   \varepsilon_{\text{GEM}}(E) = \frac{Q_{\text{GEM}}(E, 800~\text{mbar})}
    {T_{\text{W}}(E)\left( 1 - \varepsilon_{\text{DME}}(E, 800~\text{mbar})\right)}


.. _figure-aux_extraction_prob_v001:
.. figure:: figures/irfgen/aux_extraction_prob_v001.*
   :width: 80%

   Window and GEM photo-electron extraction probability as a function of energy.
   As the original data are quite noisy, we use a non-interpolating spline
   approximation (represented by the solid, smooth lines) in the rest of our
   modeling.


Pressure scaling
~~~~~~~~~~~~~~~~

The models for the window and GEM photo-electron extraction probability, along
with the tabulated values of the window transparency and the DME photoabsorption
probability, allow for a complete modeling of the GPD quantum efficiency
as a function of energy, namely:

.. math::
   Q_{\text{W}}(E) &= \varepsilon_{\text{W}}(E)\\
   Q_{\text{DME}}(E, p) &= T_{\text{W}}(E) \varepsilon_{\text{DME}}(E, p)\\
   Q_{\text{GEM}}(E, p) &= T_{\text{W}}(E)
   \left( 1 - \varepsilon_{\text{DME}}(E, p)\right)\varepsilon_{\text{GEM}}(E)

And, of course, the relative probability of absorption for any of the three
classes of events is readily calculated:

.. math::
   p_{\text{W}}(E, p) &= \frac{Q_{\text{W}}(E)}{Q_{\text{GPD}}(E, p)}\\
   p_{\text{DME}}(E, p) &= \frac{Q_{\text{DME}}(E)}{Q_{\text{GPD}}(E, p)}\\
   p_{\text{GEM}}(E, p) &= \frac{Q_{\text{GEM}}(E)}{Q_{\text{GPD}}(E, p)} \\

As shown in the figure below, the fraction of events absorbed in the active
volume increases with pressure---or, phrased in a different way, the
prominence of the low-energy tails tends to be larger at relatively low pressure.

.. _figure-aux_absorption_prob_v001:
.. figure:: figures/irfgen/aux_absorption_prob_v001.*
   :width: 80%

   Relative probability of X-ray absorption in the window, gas and GEM as
   a function of energy for two different values of the filling pressure.

.. note::

   The main interface to effective area data is
   :class:`ixpeobssim.irfgen.gpd.xQeffDataInterface`


Response matrix
---------------

The response matrix is assembled by summing up (in the right proportion,
depending on the target pressure) the partial response matrices for events
converting in the gas, the window and the GEM.


.. note::

   The main interface to response matrix data is
   :class:`ixpeobssim.irfgen.gpd.xEdispDataInterface`


Modulation factor
-----------------

.. note::

   The main interface to modulation factor data is
   :class:`ixpeobssim.irfgen.gpd.xModfDataInterface`



Version history
---------------

Here is a concise account of the various iterations of the auxiliary files
used for generating response functions.

Version v003
~~~~~~~~~~~~

Version 3 is based on exactly the same ``ixpesim`` simulations as version 2,
but with a slightly different (and more consistent) treatment of the
PHA to PI conversion for the response matrix.


Version v002
~~~~~~~~~~~~

This was used for version 7 of the response functions, after the first extensive
fine tuning of the Geant 4 Monte Carlo simulation to ground test and calibration
data.

* Statistics: 25 M ``allx`` events and 28 lines with 1 M events each.
* ``ixpesim`` and ``ixperecon`` version: 12.8.1


Version v001
~~~~~~~~~~~~

This one never made it to actual response functions, and is mainly kept into
the repository because the underlying photon lists were created with the same
``ixpesim`` version used to inform version 6 of the response functions before the
auxiliary file machinery were put in place. This allows a meaningful comparison
with earlier versions of the response functions.

* Statistics: 5 M ``allx`` events and 19 lines with 250 k events each.
* ``ixpesim`` and ``ixperecon`` version: 12.4.0
